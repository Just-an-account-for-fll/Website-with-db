Sure! Let's modify the setup to use ESP-NOW for communication between the ESP32 devices and ensure that the receiver ESP32 connects to WiFi only for hosting the API and HTML servers.

Here's the updated code:

ESP32 - Data Sender (2nd ESP32):

---START---

cpp
#include <esp_now.h>
#include <WiFi.h>

uint8_t broadcastAddress[] = {0x24, 0x6F, 0x28, 0xA2, 0xAD, 0x68}; // Replace with the receiver's MAC address

typedef struct struct_message {
  String message;
} struct_message;

struct_message myData;

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_send_cb(OnDataSent);
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop() {
  sendData();
  delay(20000); // Send data every 20 seconds
}

void sendData() {
  myData.message = "your_data_here";
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
  if (result == ESP_OK) {
    Serial.println("Data sent successfully");
  } else {
    Serial.println("Error sending data");
  }
}

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Last Packet Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

---END---

ESP32 - Data Receiver (1st ESP32):

--START---

cpp
#include <esp_now.h>
#include <WiFi.h>
#include <WebServer.h>
#include <SPIFFS.h>

const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";

WebServer server(80);

typedef struct struct_message {
  String message;
} struct_message;

struct_message incomingData;

void setup() {
  Serial.begin(115200);
  
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_recv_cb(OnDataRecv);

  if (!SPIFFS.begin(true)) {
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  server.on("/api/data", HTTP_POST, handleData);
  server.on("/api/request", HTTP_GET, handleRequest);
  server.begin();
  Serial.println("Server started");
}

void loop() {
  server.handleClient();
}

void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len) {
  memcpy(&incomingData, incomingData, sizeof(incomingData));
  Serial.print("Bytes received: ");
  Serial.println(len);
  Serial.print("Data: ");
  Serial.println(incomingData.message);
  File file = SPIFFS.open("/data.txt", FILE_APPEND);
  if (!file) {
    Serial.println("Failed to open file");
    return;
  }
  file.println(incomingData.message);
  file.close();
}

void handleData() {
  if (server.hasArg("plain") == false) {
    server.send(400, "text/plain", "Invalid request");
    return;
  }
  String data = server.arg("plain");
  File file = SPIFFS.open("/data.txt", FILE_APPEND);
  if (!file) {
    server.send(500, "text/plain", "Failed to open file");
    return;
  }
  file.println(data);
  file.close();
  server.send(200, "text/plain", "Data received and saved");
}

void handleRequest() {
  File file = SPIFFS.open("/data.txt", FILE_READ);
  if (!file) {
    server.send(500, "text/plain", "Failed to open file");
    return;
  }
  String data = file.readString();
  file.close();
  server.send(200, "text/plain", data);
}

---END---

With this setup:

The data sender (second ESP32) will use ESP-NOW to send data every 20 seconds to the data receiver (first ESP32).

The data receiver (first ESP32) will connect to WiFi, host the API server, and handle incoming data from ESP-NOW.

Let me know if you need any further assistance or modifications